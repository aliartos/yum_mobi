"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var date_fns_1 = require("date-fns");
var router_1 = require("@angular/router");
var router_2 = require("@angular/router");
var common_1 = require("@angular/common");
var remote = require("../../remote");
var common_2 = require("@angular/common");
// import { MonthNavComponent } from '../../shared/header/month-nav/month-nav.component';
var global_settings_service_service_1 = require("../../shared/services/global-settings-service.service");
;
var HomeComponent = (function () {
    function HomeComponent(hungryService, datePipe, route, location, router, globalSettingsService, adminApi) {
        this.hungryService = hungryService;
        this.datePipe = datePipe;
        this.route = route;
        this.location = location;
        this.router = router;
        this.globalSettingsService = globalSettingsService;
        this.adminApi = adminApi;
        this.date = new Date();
        this.monthDate = new Date();
        this.weekDays = [];
        this.dailymenusMap = new Map();
        this.showLoadSpinner = false;
        this.weeklyTotalPrice = 0;
    }
    HomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.currency = this.globalSettingsService.getCurrency();
        this.deadline = this.globalSettingsService.getDeadLine();
        this.notes = this.globalSettingsService.getNotes();
        // this.observable = Observable
        // .zip(this.globalSettingsService.getWorkingDays(), this.controlUserService.getUser(), (wdays: any, controlledUser: any) => {
        //    return { wdays: wdays, controlledUser: controlledUser } })
        // .subscribe((r:observables) => {
        //   this.workingDays = r.wdays;
        //   this.controlledUser = r.controlledUser;
        //   console.log("Controlled user:", r.controlledUser);
        //   this.setup();
        // });
        this.globalSettingsService.getWorkingDays().subscribe(function (wdays) {
            _this.workingDays = wdays;
            //admin
            /*this.observable = this.controlUserService.getUser().subscribe(user => {
              if (user) { console.log("Controlled user:", user); }
              this.controlledUser = user;
              
            });*/
            _this.setup();
        });
    };
    HomeComponent.prototype.setup = function () {
        var _this = this;
        this.sub = this.route.params.subscribe(function (params) {
            var dt = new Date(+params['year'], 1, 1); // (+) converts string 'year' na d 'month' to a number
            dt = date_fns_1.setISOWeek(dt, +params['week']);
            if (date_fns_1.isValid(dt)) {
                dt = date_fns_1.addDays(dt, 1);
                //console.log('router dt:', dt);
                _this.date = dt;
                //this.monthDate = this.date;
                _this.weekDaysCal(date_fns_1.startOfWeek(_this.date, { weekStartsOn: 1 }));
                if (_this.weekDays.length > 0) {
                    _this.monthDate = new Date(_this.weekDays[_this.weekDays.length - 1]);
                }
                else {
                    _this.monthDate = _this.date;
                }
                _this.getCurrentWeeklyMenu(_this.buildweekYear(_this.date));
            }
        });
        if (date_fns_1.isToday(this.date)) {
            this.showLoadSpinner = true;
            this.monthDate = this.date;
            this.weekDaysCal(date_fns_1.startOfWeek(this.date, { weekStartsOn: 1 }));
            this.hungryService.menusWeeklyGet(this.controlledUser ? this.controlledUser.id : null).subscribe(function (dailymenus) {
                _this.showLoadSpinner = false;
                _this.dailymenus = dailymenus;
                _this.weekMenuMap();
            }, function (error) { return _this.showLoadSpinner = false; });
        }
    };
    HomeComponent.prototype.handleUserUpdated = function (menuData, day) {
        var menu = this.dailymenusMap.get(day);
        menu.totalPrice = menuData.price;
        menu.comment = menuData.comment;
        this.dailymenusMap.set(day, menu);
    };
    HomeComponent.prototype.getTotalPrice = function () {
        var weekTotal = 0;
        this.dailymenusMap.forEach(function (menu) {
            if (menu.totalPrice != null) {
                weekTotal += menu.totalPrice;
            }
        });
        return weekTotal;
    };
    HomeComponent.prototype.ngOnDestroy = function () {
        if (this.sub)
            this.sub.unsubscribe();
        if (this.observable)
            this.observable.unsubscribe();
    };
    HomeComponent.prototype.getCurrentWeeklyMenu = function (weekYear) {
        var _this = this;
        this.showLoadSpinner = true;
        this.hungryService.menusWeeklyWeekGet(weekYear, this.controlledUser ? this.controlledUser.id : null).subscribe(function (dailymenus) {
            _this.showLoadSpinner = false;
            _this.dailymenus = dailymenus;
            _this.weekMenuMap();
        }, function (error) { return _this.showLoadSpinner = false; });
    };
    HomeComponent.prototype.weekDaysCal = function (d) {
        this.weekDays = [];
        for (var i = 0; i < 7; i++) {
            var dtStr = this.datePipe.transform(d, 'yyyy-MM-dd');
            if (this.workingDays.indexOf(d.getDay()) > -1) {
                this.weekDays.push(dtStr);
            }
            d = date_fns_1.addDays(d, 1);
        }
        //console.log(this.weekDays);
    };
    HomeComponent.prototype.weekMenuMap = function () {
        this.dailymenusMap.clear();
        for (var i = 0; i < this.dailymenus.length; i++) {
            var dt = new Date(this.dailymenus[i].date);
            var dtStr = this.datePipe.transform(dt, 'yyyy-MM-dd');
            this.dailymenusMap.set(dtStr, this.dailymenus[i]);
        }
    };
    HomeComponent.prototype.getDailyMenusMap = function () {
        return this.dailymenusMap;
    };
    HomeComponent.prototype.getDailyMenu = function (d) {
        for (var _i = 0, _a = this.dailymenus; _i < _a.length; _i++) {
            var dailymenu = _a[_i];
            if (dailymenu.date === d) {
                return dailymenu;
            }
        }
    };
    HomeComponent.prototype.getDailyMenuComment = function (dt) {
        return this.dailymenusMap.get(dt) ? this.dailymenusMap.get(dt).comment : null;
    };
    HomeComponent.prototype.dailyMenuExists = function (dateStr) {
        return this.dailymenusMap.has(dateStr);
    };
    HomeComponent.prototype.previousWeek = function () {
        this.date = date_fns_1.subWeeks(this.date, 1);
        if (date_fns_1.getISOWeek(this.date) === date_fns_1.getISOWeek(new Date()) && this.date.getFullYear() === new Date().getFullYear()) {
            this.router.navigate(['/hungry']);
        }
        else {
            this.navWeekYear(this.date);
        }
    };
    HomeComponent.prototype.currentWeek = function () {
        this.router.navigate(['/hungry']);
    };
    HomeComponent.prototype.nextWeek = function () {
        this.date = date_fns_1.addWeeks(this.date, 1);
        if (date_fns_1.getISOWeek(this.date) === date_fns_1.getISOWeek(new Date()) && this.date.getFullYear() === new Date().getFullYear()) {
            this.router.navigate(['/hungry']);
        }
        else {
            this.navWeekYear(this.date);
        }
    };
    HomeComponent.prototype.navWeekYear = function (dt) {
        this.router.navigate(['/hungry/', date_fns_1.getYear(dt), this.pad(date_fns_1.getISOWeek(dt), 2)]);
    };
    HomeComponent.prototype.buildweekYear = function (dt) {
        return this.pad(date_fns_1.getISOWeek(dt), 2) + '-' + date_fns_1.getISOYear(dt);
    };
    HomeComponent.prototype.pad = function (num, size) {
        var s = num + '';
        while (s.length < size) {
            s = '0' + s;
        }
        return s;
    };
    HomeComponent.prototype.onMonthNavView = function (dt) {
        //this.monthDate = dt;
        if (dt.getMonth() === new Date().getMonth() && dt.getFullYear() === new Date().getFullYear()) {
            this.router.navigate(['/hungry']);
        }
        else {
            this.router.navigate(['/hungry/', date_fns_1.getISOYear(dt), this.pad(date_fns_1.getISOWeek(dt), 2)]);
        }
    };
    HomeComponent.prototype.formattedDay = function (day) {
        var date = new Date(day);
        return (this.datePipe.transform(date, 'EEEE / d MMM'));
    };
    HomeComponent.prototype.formattedDeadline = function (deadline) {
        if (deadline != null) {
            var time = deadline.dTime;
            return ('0' + time.getHours()).slice(-2) + ':' + ('0' + time.getMinutes()).slice(-2);
        }
        else {
            return '';
        }
    };
    HomeComponent.prototype.formattedDeadlineDays = function (deadline) {
        if (deadline != null) {
            switch (deadline.dDays) {
                case 0:
                    return 'the same day';
                case 1:
                    return 'the previous day';
                default:
                    return deadline.dDays + ' days before';
            }
        }
        else {
            return '';
        }
    };
    HomeComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-hungry-home',
            templateUrl: './home.component.html',
            styleUrls: ['home.component.css']
        }),
        __metadata("design:paramtypes", [remote.HungryApi, common_2.DatePipe,
            router_2.ActivatedRoute,
            common_1.Location,
            router_1.Router,
            global_settings_service_service_1.GlobalSettingsService, remote.AdminApi])
    ], HomeComponent);
    return HomeComponent;
}());
exports.HomeComponent = HomeComponent;
//# sourceMappingURL=data:application/json;base64,