/**
 * Yum Food Orders
 * **Yum application, order food daily from the best chef in town**  This API is used by the angular.io client, and is not meant to be used otherwise.  Find source code of this API [here](https://github.com/jrtdev/yum)  Copyright (C) 2017 JR Technologies.     ------------------------------------      Last edit: 27/09/2017 09:45  -------------------------------------
 *
 * OpenAPI spec version: 1.2.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HungryApi {

    protected basePath = 'http://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Get user's balance
     * @param id
     */
    public balanceIdGet(id: number, extraHttpRequestParams?: any): Observable<number> {
        return this.balanceIdGetWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets monthly menus.
     * Return a list containing all menus of the month.
     * @summary Gets monthly menus.
     * @param userid
     */
    public menusMonthlyGet(userid?: number, extraHttpRequestParams?: any): Observable<Array<models.DailyMenu>> {
        return this.menusMonthlyGetWithHttpInfo(userid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a list containing all menus of the month.
     * @summary Gets monthly menus of the specified month.
     * @param monthyear ex. 12-2016
     * @param userid
     */
    public menusMonthlyMonthyearGet(monthyear: string, userid?: number, extraHttpRequestParams?: any): Observable<Array<models.DailyMenu>> {
        return this.menusMonthlyMonthyearGetWithHttpInfo(monthyear, userid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a list containing all menus of the week.
     * @summary Gets weekly menus
     * @param userid
     */
    public menusWeeklyGet(userid?: number, extraHttpRequestParams?: any): Observable<Array<models.DailyMenu>> {
        return this.menusWeeklyGetWithHttpInfo(userid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a list containing all menus of the week.
     * @summary Gets weekly menu of the specified week
     * @param week ex. 02-2017
     * @param userid
     */
    public menusWeeklyWeekGet(week: string, userid?: number, extraHttpRequestParams?: any): Observable<Array<models.DailyMenu>> {
        return this.menusWeeklyWeekGetWithHttpInfo(week, userid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes the order
     * @summary Deletes specified order
     * @param id
     * @param userid
     * @param dailyMenuDetails dailymenu details id, version, date
     */
    public ordersIdDelete(id: number, userid?: number, dailyMenuDetails?: models.DailyMenuDetails, extraHttpRequestParams?: any): Observable<models.OrderUpdate> {
        return this.ordersIdDeleteWithHttpInfo(id, userid, dailyMenuDetails, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Modify the order
     * @summary Get order for the specified day
     * @param id
     * @param dailyMenuId
     * @param dailyMenuVersion
     * @param dailyMenuDate
     * @param userid
     */
    public ordersIdGet(id: number, dailyMenuId: number, dailyMenuVersion: number, dailyMenuDate: Date, userid?: number, extraHttpRequestParams?: any): Observable<models.DailyOrder> {
        return this.ordersIdGetWithHttpInfo(id, dailyMenuId, dailyMenuVersion, dailyMenuDate, userid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Modify the order
     * @summary Modifies order for the specified day
     * @param id
     * @param userid
     * @param updateOrderItems The order items to modify
     */
    public ordersIdPut(id: number, userid?: number, updateOrderItems?: models.UpdateOrderItems, extraHttpRequestParams?: any): Observable<models.OrderUpdate> {
        return this.ordersIdPutWithHttpInfo(id, userid, updateOrderItems, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * A new order for the specified daily menu
     * @summary Place a new order
     * @param order The order to place
     * @param userid
     */
    public ordersPost(order?: models.Order, userid?: number, extraHttpRequestParams?: any): Observable<models.DailyMenu> {
        return this.ordersPostWithHttpInfo(order, userid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * get refreshed token
     */
    public refreshTokenGet(extraHttpRequestParams?: any): Observable<models.Refresh> {
        return this.refreshTokenGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                  return response.json() || {};
                }
            });
    }

    /**
     * get user settings
     */
    public settingsGet(extraHttpRequestParams?: any): Observable<models.User> {
        return this.settingsGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Deletes profile picture.
     */
    public settingsPictureDelete(extraHttpRequestParams?: any): Observable<{}> {
        return this.settingsPictureDeleteWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Uploads profile pic.
     * @param file The file to upload
     */
    public settingsPicturePost(file?: any, extraHttpRequestParams?: any): Observable<{}> {
        return this.settingsPicturePostWithHttpInfo(file, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get profile picture.
     * @summary Get profile picture.
     * @param token auth token
     */
    public settingsPictureTokenGet(token: string, extraHttpRequestParams?: any): Observable<any> {
        return this.settingsPictureTokenGetWithHttpInfo(token, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * set user data/settings
     * @param body User data
     */
    public settingsPut(body: models.UserSettings, extraHttpRequestParams?: any): Observable<{}> {
        return this.settingsPutWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

     /**
     * Get user's transactions
     * @param id
     */
    public transactionsIdGet(id: number, extraHttpRequestParams?: any): Observable<Array<models.Transaction>> {
        return this.transactionsIdGetWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     *
     * Get user&#39;s balance
     * @param id
     */
    public balanceIdGetWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/balance/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling balanceIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }



    /**
     * Gets monthly menus.
     * Return a list containing all menus of the month.
     * @param userid
     */
    public menusMonthlyGetWithHttpInfo(userid?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/menus/monthly';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets monthly menus of the specified month.
     * Returns a list containing all menus of the month.
     * @param monthyear ex. 12-2016
     * @param userid
     */
    public menusMonthlyMonthyearGetWithHttpInfo(monthyear: string, userid?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/menus/monthly/${monthyear}'
                    .replace('${' + 'monthyear' + '}', String(monthyear));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'monthyear' is not null or undefined
        if (monthyear === null || monthyear === undefined) {
            throw new Error('Required parameter monthyear was null or undefined when calling menusMonthlyMonthyearGet.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets weekly menus
     * Returns a list containing all menus of the week.
     * @param userid
     */
    public menusWeeklyGetWithHttpInfo(userid?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/menus/weekly';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Gets weekly menu of the specified week
     * Returns a list containing all menus of the week.
     * @param week ex. 02-2017
     * @param userid
     */
    public menusWeeklyWeekGetWithHttpInfo(week: string, userid?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/menus/weekly/${week}'
                    .replace('${' + 'week' + '}', String(week));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'week' is not null or undefined
        if (week === null || week === undefined) {
            throw new Error('Required parameter week was null or undefined when calling menusWeeklyWeekGet.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes specified order
     * Deletes the order
     * @param id
     * @param userid
     * @param dailyMenuDetails dailymenu details id, version, date
     */
    public ordersIdDeleteWithHttpInfo(id: number, userid?: number, dailyMenuDetails?: models.DailyMenuDetails, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/orders/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ordersIdDelete.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            body: dailyMenuDetails == null ? '' : JSON.stringify(dailyMenuDetails), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get order for the specified day
     * Modify the order
     * @param id
     * @param dailyMenuId
     * @param dailyMenuVersion
     * @param dailyMenuDate
     * @param userid
     */
    public ordersIdGetWithHttpInfo(id: number, dailyMenuId: number, dailyMenuVersion: number, dailyMenuDate: Date, userid?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/orders/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ordersIdGet.');
        }
        // verify required parameter 'dailyMenuId' is not null or undefined
        if (dailyMenuId === null || dailyMenuId === undefined) {
            throw new Error('Required parameter dailyMenuId was null or undefined when calling ordersIdGet.');
        }
        // verify required parameter 'dailyMenuVersion' is not null or undefined
        if (dailyMenuVersion === null || dailyMenuVersion === undefined) {
            throw new Error('Required parameter dailyMenuVersion was null or undefined when calling ordersIdGet.');
        }
        // verify required parameter 'dailyMenuDate' is not null or undefined
        if (dailyMenuDate === null || dailyMenuDate === undefined) {
            throw new Error('Required parameter dailyMenuDate was null or undefined when calling ordersIdGet.');
        }
        if (dailyMenuId !== undefined) {
            queryParameters.set('dailyMenuId', <any>dailyMenuId);
        }

        if (dailyMenuVersion !== undefined) {
            queryParameters.set('dailyMenuVersion', <any>dailyMenuVersion);
        }

        if (dailyMenuDate !== undefined) {
            queryParameters.set('dailyMenuDate', <any>dailyMenuDate);
        }

        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Modifies order for the specified day
     * Modify the order
     * @param id
     * @param userid
     * @param updateOrderItems The order items to modify
     */
    public ordersIdPutWithHttpInfo(id: number, userid?: number, updateOrderItems?: models.UpdateOrderItems, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/orders/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ordersIdPut.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: updateOrderItems == null ? '' : JSON.stringify(updateOrderItems), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Place a new order
     * A new order for the specified daily menu
     * @param order The order to place
     * @param userid
     */
    public ordersPostWithHttpInfo(order?: models.Order, userid?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/orders';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userid !== undefined) {
            queryParameters.set('userid', <any>userid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: order == null ? '' : JSON.stringify(order), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * get refreshed token
     */
    public refreshTokenGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/refreshToken';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * get user settings
     */
    public settingsGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes profile picture.
     *
     */
    public settingsPictureDeleteWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/picture';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Uploads profile pic.
     *
     * @param file The file to upload
     */
    public settingsPicturePostWithHttpInfo(file?: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/picture';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (file !== undefined) {
            formParams.set('file', <any>file);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get profile picture.
     * Get profile picture.
     * @param token auth token
     */
    public settingsPictureTokenGetWithHttpInfo(token: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/picture/token';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling settingsPictureTokenGet.');
        }
        if (token !== undefined) {
            queryParameters.set('token', <any>token);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'image/jpeg'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * set user data/settings
     * @param body User data
     */
    public settingsPutWithHttpInfo(body: models.UserSettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling settingsPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * Get user&#39;s transactions
     * @param id
     */
    public transactionsIdGetWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/transactions/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling transactionsIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }
}
