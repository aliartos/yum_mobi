"use strict";
/**
 * Yum Food Orders
 * **Yum application, order food daily from the best chef in town**  This API is used by the angular.io client, and is not meant to be used otherwise.  Find source code of this API [here](http://gitlab/)  Copyright (C) 2017 JR Technologies.     ------------------------------------       Last edit: 21/04/2017 15:00   -------------------------------------
 *
 * OpenAPI spec version: 1.0.7
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var ChefApi = (function () {
    function ChefApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:8082/api';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     * Put Food/Foods in a dailyMenu
     *
     * @param id
     * @param dailyMenu The daily menu to be updated
     */
    ChefApi.prototype.dailyMenusIdPut = function (id, dailyMenu, extraHttpRequestParams) {
        return this.dailyMenusIdPutWithHttpInfo(id, dailyMenu, extraHttpRequestParams)
            .map(function (response) {
            return response;
            /*if (response.status === 204 || response.status === 200) {
                return response.json();
            } else {
                return response.json();
            }*/
        });
    };
    /**
     * Gets all dailyMenus
     * Return a list of all dailyMenus
     */
    ChefApi.prototype.dailyMenusMonthlyGet = function (extraHttpRequestParams) {
        return this.dailyMenusMonthlyGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get dailyMenus by month
     *
     * @param monthyear ex. 02-2017
     */
    ChefApi.prototype.dailyMenusMonthlyMonthyearGet = function (monthyear, extraHttpRequestParams) {
        return this.dailyMenusMonthlyMonthyearGetWithHttpInfo(monthyear, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * New daily menu
     *
     * @param newDailyMenu A new daily menu
     */
    ChefApi.prototype.dailyMenusPost = function (newDailyMenu, extraHttpRequestParams) {
        return this.dailyMenusPostWithHttpInfo(newDailyMenu, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get food by name
     *
     * @param name
     */
    ChefApi.prototype.foodsFindByNameNameGet = function (name, extraHttpRequestParams) {
        return this.foodsFindByNameNameGetWithHttpInfo(name, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Deletes an existing food
     * Chef can update food name, type, description or price
     * @param foodId
     * @param archive
     */
    ChefApi.prototype.foodsFoodIdDelete = function (foodId, archive, extraHttpRequestParams) {
        return this.foodsFoodIdDeleteWithHttpInfo(foodId, archive, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get food by id, optionally check if editable
     *
     * @param foodId
     * @param editable
     */
    ChefApi.prototype.foodsFoodIdGet = function (foodId, editable, extraHttpRequestParams) {
        return this.foodsFoodIdGetWithHttpInfo(foodId, editable, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Updates an existing food
     * Chef can update food name, type, description or price
     * @param foodId
     * @param food The food to be updated
     * @param clone
     */
    ChefApi.prototype.foodsFoodIdPut = function (foodId, food, clone, extraHttpRequestParams) {
        return this.foodsFoodIdPutWithHttpInfo(foodId, food, clone, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Gets all foods, optionally return stats per food
     * Return a list of all foods
     * @param stats
     * @param page Request pagination page
     * @param size Request pagination size / num of foods
     * @param foodType Request foodType filter
     * @param archived Request archived filter
     * @param orderBy Request orderBy filter
     * @param foods_version Request foods_version
     * @param orderDirection Request order direction filter
     */
    ChefApi.prototype.foodsGet = function (stats, page, size, foodType, archived, orderBy, foods_version, orderDirection, extraHttpRequestParams) {
        return this.foodsGetWithHttpInfo(stats, page, size, foodType, archived, orderBy, foods_version, orderDirection, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else if (response.status === 304) {
                var foodsPage = void 0;
                foodsPage.foods_version = foods_version;
                return foodsPage;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * A new food
     * Create a food with basic data
     * @param foodDetails The food to save
     */
    ChefApi.prototype.foodsPost = function (foodDetails, extraHttpRequestParams) {
        return this.foodsPostWithHttpInfo(foodDetails, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get daily orders summary
     *
     * @param day
     */
    ChefApi.prototype.ordersDailyDayGet = function (day, extraHttpRequestParams) {
        return this.ordersDailyDayGetWithHttpInfo(day, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get a summary of orders by month
     *
     */
    ChefApi.prototype.ordersMonthlyGet = function (extraHttpRequestParams) {
        return this.ordersMonthlyGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get a summary of orders by month
     *
     * @param monthyear ex 02-2017
     */
    ChefApi.prototype.ordersMonthlyMonthyearGet = function (monthyear, extraHttpRequestParams) {
        return this.ordersMonthlyMonthyearGetWithHttpInfo(monthyear, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * @summary Send email with daily summary
     * @param day
     */
    ChefApi.prototype.reportDayPost = function (day, extraHttpRequestParams) {
        return this.reportDayPostWithHttpInfo(day, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Put Food/Foods in a dailyMenu
     *
     * @param id
     * @param dailyMenu The daily menu to be updated
     */
    ChefApi.prototype.dailyMenusIdPutWithHttpInfo = function (id, dailyMenu, extraHttpRequestParams) {
        var path = this.basePath + ("/dailyMenus/" + id);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dailyMenusIdPut.');
        }
        // verify required parameter 'dailyMenu' is not null or undefined
        if (dailyMenu === null || dailyMenu === undefined) {
            throw new Error('Required parameter dailyMenu was null or undefined when calling dailyMenusIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: dailyMenu == null ? '' : JSON.stringify(dailyMenu),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Gets all dailyMenus
     * Return a list of all dailyMenus
     */
    ChefApi.prototype.dailyMenusMonthlyGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + "/dailyMenus/monthly";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get dailyMenus by month
     *
     * @param monthyear ex. 02-2017
     */
    ChefApi.prototype.dailyMenusMonthlyMonthyearGetWithHttpInfo = function (monthyear, extraHttpRequestParams) {
        var path = this.basePath + ("/dailyMenus/monthly/" + monthyear);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'monthyear' is not null or undefined
        if (monthyear === null || monthyear === undefined) {
            throw new Error('Required parameter monthyear was null or undefined when calling dailyMenusMonthlyMonthyearGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * New daily menu
     *
     * @param newDailyMenu A new daily menu
     */
    ChefApi.prototype.dailyMenusPostWithHttpInfo = function (newDailyMenu, extraHttpRequestParams) {
        var path = this.basePath + "/dailyMenus";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'newDailyMenu' is not null or undefined
        if (newDailyMenu === null || newDailyMenu === undefined) {
            throw new Error('Required parameter newDailyMenu was null or undefined when calling dailyMenusPost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: newDailyMenu == null ? '' : JSON.stringify(newDailyMenu),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get food by name
     *
     * @param name
     */
    ChefApi.prototype.foodsFindByNameNameGetWithHttpInfo = function (name, extraHttpRequestParams) {
        var path = this.basePath + ("/foods/findByName/" + name);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling foodsFindByNameNameGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Deletes an existing food
     * Chef can update food name, type, description or price
     * @param foodId
     * @param archive
     */
    ChefApi.prototype.foodsFoodIdDeleteWithHttpInfo = function (foodId, archive, extraHttpRequestParams) {
        var path = this.basePath + ("/foods/" + foodId);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'foodId' is not null or undefined
        if (foodId === null || foodId === undefined) {
            throw new Error('Required parameter foodId was null or undefined when calling foodsFoodIdDelete.');
        }
        if (archive !== undefined) {
            queryParameters.set('archive', archive);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get food by id, optionally check if editable
     *
     * @param foodId
     * @param editable
     */
    ChefApi.prototype.foodsFoodIdGetWithHttpInfo = function (foodId, editable, extraHttpRequestParams) {
        var path = this.basePath + ("/foods/" + foodId);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'foodId' is not null or undefined
        if (foodId === null || foodId === undefined) {
            throw new Error('Required parameter foodId was null or undefined when calling foodsFoodIdGet.');
        }
        if (editable !== undefined) {
            queryParameters.set('editable', editable);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Updates an existing food
     * Chef can update food name, type, description or price
     * @param foodId
     * @param food The food to be updated
     * @param clone
     */
    ChefApi.prototype.foodsFoodIdPutWithHttpInfo = function (foodId, food, clone, extraHttpRequestParams) {
        var path = this.basePath + ("/foods/" + foodId);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'foodId' is not null or undefined
        if (foodId === null || foodId === undefined) {
            throw new Error('Required parameter foodId was null or undefined when calling foodsFoodIdPut.');
        }
        // verify required parameter 'food' is not null or undefined
        if (food === null || food === undefined) {
            throw new Error('Required parameter food was null or undefined when calling foodsFoodIdPut.');
        }
        if (clone !== undefined) {
            queryParameters.set('clone', clone);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: food == null ? '' : JSON.stringify(food),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Gets all foods, optionally return stats per food
     * Return a list of all foods
     * @param stats
     * @param page Request pagination page
     * @param size Request pagination size / num of foods
     * @param foodType Request foodType filter
     * @param archived Request archived filter
     * @param orderBy Request orderBy filter
     */
    ChefApi.prototype.foodsGetWithHttpInfo = function (stats, page, size, foodType, archived, orderBy, foods_version, orderDirection, extraHttpRequestParams) {
        var path = this.basePath + "/foods";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (stats !== undefined) {
            queryParameters.set('stats', stats);
        }
        if (page !== undefined) {
            queryParameters.set('page', page);
        }
        if (size !== undefined) {
            queryParameters.set('size', size);
        }
        if (foodType !== undefined) {
            queryParameters.set('foodType', foodType);
        }
        if (archived !== undefined) {
            queryParameters.set('archived', archived);
        }
        if (orderBy !== undefined) {
            queryParameters.set('orderBy', orderBy);
        }
        if (foods_version !== undefined) {
            queryParameters.set('foods_version', foods_version);
        }
        if (orderDirection !== undefined) {
            queryParameters.set('orderDirection', orderDirection);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * A new food
     * Create a food with basic data
     * @param foodDetails The food to save
     */
    ChefApi.prototype.foodsPostWithHttpInfo = function (foodDetails, extraHttpRequestParams) {
        var path = this.basePath + "/foods";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: foodDetails == null ? '' : JSON.stringify(foodDetails),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get daily orders summary
     *
     * @param day
     */
    ChefApi.prototype.ordersDailyDayGetWithHttpInfo = function (day, extraHttpRequestParams) {
        var path = this.basePath + ("/orders/daily/" + day);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'day' is not null or undefined
        if (day === null || day === undefined) {
            throw new Error('Required parameter day was null or undefined when calling ordersDailyDayGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get a summary of orders by month
     *
     */
    ChefApi.prototype.ordersMonthlyGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + "/orders/monthly";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get a summary of orders by month
     *
     * @param monthyear ex 02-2017
     */
    ChefApi.prototype.ordersMonthlyMonthyearGetWithHttpInfo = function (monthyear, extraHttpRequestParams) {
        var path = this.basePath + ("/orders/monthly/" + monthyear);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'monthyear' is not null or undefined
        if (monthyear === null || monthyear === undefined) {
            throw new Error('Required parameter monthyear was null or undefined when calling ordersMonthlyMonthyearGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Send email with daily summary
     *
     * @param day
     */
    ChefApi.prototype.reportDayPostWithHttpInfo = function (day, extraHttpRequestParams) {
        var path = this.basePath + '/report/${day}'
            .replace('${' + 'day' + '}', String(day));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'day' is not null or undefined
        if (day === null || day === undefined) {
            throw new Error('Required parameter day was null or undefined when calling reportDayPost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    ChefApi = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], ChefApi);
    return ChefApi;
}());
exports.ChefApi = ChefApi;
//# sourceMappingURL=data:application/json;base64,