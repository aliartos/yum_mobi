"use strict";
/**
 * Yum Food Orders
 * **Yum application, order food daily from the best chef in town**  This API is used by the angular.io client, and is not meant to be used otherwise.  Find source code of this API [here](https://github.com/jrtdev/yum)  Copyright (C) 2017 JR Technologies.     ------------------------------------      Last edit: 27/09/2017 09:45  -------------------------------------
 *
 * OpenAPI spec version: 1.2.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var HungryApi = (function () {
    function HungryApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost/api';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     * Get user's balance
     * @param id
     */
    HungryApi.prototype.balanceIdGet = function (id, extraHttpRequestParams) {
        return this.balanceIdGetWithHttpInfo(id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Gets monthly menus.
     * Return a list containing all menus of the month.
     * @summary Gets monthly menus.
     * @param userid
     */
    HungryApi.prototype.menusMonthlyGet = function (userid, extraHttpRequestParams) {
        return this.menusMonthlyGetWithHttpInfo(userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Returns a list containing all menus of the month.
     * @summary Gets monthly menus of the specified month.
     * @param monthyear ex. 12-2016
     * @param userid
     */
    HungryApi.prototype.menusMonthlyMonthyearGet = function (monthyear, userid, extraHttpRequestParams) {
        return this.menusMonthlyMonthyearGetWithHttpInfo(monthyear, userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Returns a list containing all menus of the week.
     * @summary Gets weekly menus
     * @param userid
     */
    HungryApi.prototype.menusWeeklyGet = function (userid, extraHttpRequestParams) {
        return this.menusWeeklyGetWithHttpInfo(userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Returns a list containing all menus of the week.
     * @summary Gets weekly menu of the specified week
     * @param week ex. 02-2017
     * @param userid
     */
    HungryApi.prototype.menusWeeklyWeekGet = function (week, userid, extraHttpRequestParams) {
        return this.menusWeeklyWeekGetWithHttpInfo(week, userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Deletes the order
     * @summary Deletes specified order
     * @param id
     * @param userid
     * @param dailyMenuDetails dailymenu details id, version, date
     */
    HungryApi.prototype.ordersIdDelete = function (id, userid, dailyMenuDetails, extraHttpRequestParams) {
        return this.ordersIdDeleteWithHttpInfo(id, userid, dailyMenuDetails, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Modify the order
     * @summary Get order for the specified day
     * @param id
     * @param dailyMenuId
     * @param dailyMenuVersion
     * @param dailyMenuDate
     * @param userid
     */
    HungryApi.prototype.ordersIdGet = function (id, dailyMenuId, dailyMenuVersion, dailyMenuDate, userid, extraHttpRequestParams) {
        return this.ordersIdGetWithHttpInfo(id, dailyMenuId, dailyMenuVersion, dailyMenuDate, userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Modify the order
     * @summary Modifies order for the specified day
     * @param id
     * @param userid
     * @param updateOrderItems The order items to modify
     */
    HungryApi.prototype.ordersIdPut = function (id, userid, updateOrderItems, extraHttpRequestParams) {
        return this.ordersIdPutWithHttpInfo(id, userid, updateOrderItems, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * A new order for the specified daily menu
     * @summary Place a new order
     * @param order The order to place
     * @param userid
     */
    HungryApi.prototype.ordersPost = function (order, userid, extraHttpRequestParams) {
        return this.ordersPostWithHttpInfo(order, userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * get refreshed token
     */
    HungryApi.prototype.refreshTokenGet = function (extraHttpRequestParams) {
        return this.refreshTokenGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * get user settings
     */
    HungryApi.prototype.settingsGet = function (extraHttpRequestParams) {
        return this.settingsGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * @summary Deletes profile picture.
     */
    HungryApi.prototype.settingsPictureDelete = function (extraHttpRequestParams) {
        return this.settingsPictureDeleteWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * @summary Uploads profile pic.
     * @param file The file to upload
     */
    HungryApi.prototype.settingsPicturePost = function (file, extraHttpRequestParams) {
        return this.settingsPicturePostWithHttpInfo(file, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Get profile picture.
     * @summary Get profile picture.
     * @param token auth token
     */
    HungryApi.prototype.settingsPictureTokenGet = function (token, extraHttpRequestParams) {
        return this.settingsPictureTokenGetWithHttpInfo(token, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * set user data/settings
     * @param body User data
     */
    HungryApi.prototype.settingsPut = function (body, extraHttpRequestParams) {
        return this.settingsPutWithHttpInfo(body, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
    * Get user's transactions
    * @param id
    */
    HungryApi.prototype.transactionsIdGet = function (id, extraHttpRequestParams) {
        return this.transactionsIdGetWithHttpInfo(id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * Get user&#39;s balance
     * @param id
     */
    HungryApi.prototype.balanceIdGetWithHttpInfo = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/balance/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling balanceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Gets monthly menus.
     * Return a list containing all menus of the month.
     * @param userid
     */
    HungryApi.prototype.menusMonthlyGetWithHttpInfo = function (userid, extraHttpRequestParams) {
        var path = this.basePath + '/menus/monthly';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Gets monthly menus of the specified month.
     * Returns a list containing all menus of the month.
     * @param monthyear ex. 12-2016
     * @param userid
     */
    HungryApi.prototype.menusMonthlyMonthyearGetWithHttpInfo = function (monthyear, userid, extraHttpRequestParams) {
        var path = this.basePath + '/menus/monthly/${monthyear}'
            .replace('${' + 'monthyear' + '}', String(monthyear));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'monthyear' is not null or undefined
        if (monthyear === null || monthyear === undefined) {
            throw new Error('Required parameter monthyear was null or undefined when calling menusMonthlyMonthyearGet.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Gets weekly menus
     * Returns a list containing all menus of the week.
     * @param userid
     */
    HungryApi.prototype.menusWeeklyGetWithHttpInfo = function (userid, extraHttpRequestParams) {
        var path = this.basePath + '/menus/weekly';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Gets weekly menu of the specified week
     * Returns a list containing all menus of the week.
     * @param week ex. 02-2017
     * @param userid
     */
    HungryApi.prototype.menusWeeklyWeekGetWithHttpInfo = function (week, userid, extraHttpRequestParams) {
        var path = this.basePath + '/menus/weekly/${week}'
            .replace('${' + 'week' + '}', String(week));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'week' is not null or undefined
        if (week === null || week === undefined) {
            throw new Error('Required parameter week was null or undefined when calling menusWeeklyWeekGet.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Deletes specified order
     * Deletes the order
     * @param id
     * @param userid
     * @param dailyMenuDetails dailymenu details id, version, date
     */
    HungryApi.prototype.ordersIdDeleteWithHttpInfo = function (id, userid, dailyMenuDetails, extraHttpRequestParams) {
        var path = this.basePath + '/orders/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ordersIdDelete.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            body: dailyMenuDetails == null ? '' : JSON.stringify(dailyMenuDetails),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get order for the specified day
     * Modify the order
     * @param id
     * @param dailyMenuId
     * @param dailyMenuVersion
     * @param dailyMenuDate
     * @param userid
     */
    HungryApi.prototype.ordersIdGetWithHttpInfo = function (id, dailyMenuId, dailyMenuVersion, dailyMenuDate, userid, extraHttpRequestParams) {
        var path = this.basePath + '/orders/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ordersIdGet.');
        }
        // verify required parameter 'dailyMenuId' is not null or undefined
        if (dailyMenuId === null || dailyMenuId === undefined) {
            throw new Error('Required parameter dailyMenuId was null or undefined when calling ordersIdGet.');
        }
        // verify required parameter 'dailyMenuVersion' is not null or undefined
        if (dailyMenuVersion === null || dailyMenuVersion === undefined) {
            throw new Error('Required parameter dailyMenuVersion was null or undefined when calling ordersIdGet.');
        }
        // verify required parameter 'dailyMenuDate' is not null or undefined
        if (dailyMenuDate === null || dailyMenuDate === undefined) {
            throw new Error('Required parameter dailyMenuDate was null or undefined when calling ordersIdGet.');
        }
        if (dailyMenuId !== undefined) {
            queryParameters.set('dailyMenuId', dailyMenuId);
        }
        if (dailyMenuVersion !== undefined) {
            queryParameters.set('dailyMenuVersion', dailyMenuVersion);
        }
        if (dailyMenuDate !== undefined) {
            queryParameters.set('dailyMenuDate', dailyMenuDate);
        }
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Modifies order for the specified day
     * Modify the order
     * @param id
     * @param userid
     * @param updateOrderItems The order items to modify
     */
    HungryApi.prototype.ordersIdPutWithHttpInfo = function (id, userid, updateOrderItems, extraHttpRequestParams) {
        var path = this.basePath + '/orders/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ordersIdPut.');
        }
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: updateOrderItems == null ? '' : JSON.stringify(updateOrderItems),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Place a new order
     * A new order for the specified daily menu
     * @param order The order to place
     * @param userid
     */
    HungryApi.prototype.ordersPostWithHttpInfo = function (order, userid, extraHttpRequestParams) {
        var path = this.basePath + '/orders';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userid !== undefined) {
            queryParameters.set('userid', userid);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: order == null ? '' : JSON.stringify(order),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * get refreshed token
     */
    HungryApi.prototype.refreshTokenGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/refreshToken';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/plain'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * get user settings
     */
    HungryApi.prototype.settingsGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/settings';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Deletes profile picture.
     *
     */
    HungryApi.prototype.settingsPictureDeleteWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/settings/picture';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Uploads profile pic.
     *
     * @param file The file to upload
     */
    HungryApi.prototype.settingsPicturePostWithHttpInfo = function (file, extraHttpRequestParams) {
        var path = this.basePath + '/settings/picture';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        var formParams = new http_1.URLSearchParams();
        // to determine the Content-Type header
        var consumes = [
            'multipart/form-data'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/x-www-form-urlencoded');
        if (file !== undefined) {
            formParams.set('file', file);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get profile picture.
     * Get profile picture.
     * @param token auth token
     */
    HungryApi.prototype.settingsPictureTokenGetWithHttpInfo = function (token, extraHttpRequestParams) {
        var path = this.basePath + '/settings/picture/token';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling settingsPictureTokenGet.');
        }
        if (token !== undefined) {
            queryParameters.set('token', token);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'image/jpeg'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * set user data/settings
     * @param body User data
     */
    HungryApi.prototype.settingsPutWithHttpInfo = function (body, extraHttpRequestParams) {
        var path = this.basePath + '/settings';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling settingsPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * Get user&#39;s transactions
     * @param id
     */
    HungryApi.prototype.transactionsIdGetWithHttpInfo = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/transactions/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling transactionsIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    HungryApi = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], HungryApi);
    return HungryApi;
}());
exports.HungryApi = HungryApi;
//# sourceMappingURL=data:application/json;base64,