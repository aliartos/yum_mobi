"use strict";
/**
 * Yum Food Orders
 * **Yum application, order food daily from the best chef in town**  This API is used by the angular.io client, and is not meant to be used otherwise.  Find source code of this API [here](http://gitlab/)  Copyright (C) 2017 JR Technologies.     ------------------------------------       Last edit: 21/04/2017 15:00   -------------------------------------
 *
 * OpenAPI spec version: 1.0.7
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var DefaultApi = (function () {
    function DefaultApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:8082/api';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     * Uploads a file.
     *
     * @param upfile The file to upload
     * @param userid Description of file contents.
     */
    DefaultApi.prototype.settingsPicturePost = function (upfile, userid, extraHttpRequestParams) {
        return this.settingsPicturePostWithHttpInfo(upfile, userid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Uploads a file.
     *
     * @param upfile The file to upload
     * @param userid Description of file contents.
     */
    DefaultApi.prototype.settingsPicturePostWithHttpInfo = function (upfile, userid, extraHttpRequestParams) {
        var path = this.basePath + "/settings/picture";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        var formParams = new http_1.URLSearchParams();
        // to determine the Content-Type header
        var consumes = [
            'multipart/form-data'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/x-www-form-urlencoded');
        if (upfile !== undefined) {
            formParams.set('upfile', upfile);
        }
        if (userid !== undefined) {
            formParams.set('userid', userid);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    DefaultApi = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], DefaultApi);
    return DefaultApi;
}());
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=data:application/json;base64,