"use strict";
/**
 * Yum Food Orders
 * **Yum application, order food daily from the best chef in town**  This API is used by the angular.io client, and is not meant to be used otherwise.  Find source code of this API [here](http://gitlab/)  Copyright (C) 2017 JR Technologies.     ------------------------------------       Last edit: 21/04/2017 15:00   -------------------------------------
 *
 * OpenAPI spec version: 1.0.7
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var AdminApi = (function () {
    function AdminApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:8082/api';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     * Update user's balance
     * @param id
     * @param amount
     */
    AdminApi.prototype.balanceIdPut = function (id, deposit, extraHttpRequestParams) {
        return this.balanceIdPutWithHttpInfo(id, deposit, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
 *
 * @summary Delete menu and orders
 * @param id
 */
    AdminApi.prototype.dailyMenusIdDelete = function (id, extraHttpRequestParams) {
        return this.dailyMenusIdDeleteWithHttpInfo(id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * get global settings
     */
    AdminApi.prototype.globalsettingsGet = function (extraHttpRequestParams) {
        return this.globalsettingsGetWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * set global settings
     * @param settings The global settings to be updated
     */
    AdminApi.prototype.globalsettingsPut = function (settings, extraHttpRequestParams) {
        return this.globalsettingsPutWithHttpInfo(settings, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return response;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get users
     *
     * @param page Request pagination page
     * @param size Request pagination size / num of users
     * @param orderBy Request orderBy filter
     * @param orderDirection Request orderBy filter
     * @param lastName Request search term
     */
    AdminApi.prototype.usersGet = function (page, size, orderBy, orderDirection, lastName, extraHttpRequestParams) {
        return this.usersGetWithHttpInfo(page, size, orderBy, orderDirection, lastName, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * Change approve status of user
     * @param id
     * @param approve Approve or disapprove
     * @param force Force disapprove user
     */
    AdminApi.prototype.usersIdApprovePut = function (id, approve, force, extraHttpRequestParams) {
        return this.usersIdApprovePutWithHttpInfo(id, approve, force, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Deletes an existing user
     *
     * @param id
     * @param force
     */
    AdminApi.prototype.usersIdDelete = function (id, force, extraHttpRequestParams) {
        return this.usersIdDeleteWithHttpInfo(id, force, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * initiate pass reset
     * @param id
     */
    AdminApi.prototype.usersIdForgotpwdPost = function (id, extraHttpRequestParams) {
        return this.usersIdForgotpwdPostWithHttpInfo(id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get user by id
     *
     * @param id
     */
    AdminApi.prototype.usersIdGet = function (id, extraHttpRequestParams) {
        return this.usersIdGetWithHttpInfo(id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
    * deletes profile picture.
    *
    * @param id user id
    */
    AdminApi.prototype.usersIdPictureDelete = function (id, extraHttpRequestParams) {
        return this.usersIdPictureDeleteWithHttpInfo(id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Uploads a file.
     *
     * @param id user id
     * @param file The file to upload
     */
    AdminApi.prototype.usersIdPicturePost = function (id, file, extraHttpRequestParams) {
        return this.usersIdPicturePostWithHttpInfo(id, file, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * Get profile picture.
     * @param token auth token
     * @param id user id
     */
    AdminApi.prototype.usersIdPictureTokenGet = function (token, id, extraHttpRequestParams) {
        return this.usersIdPictureTokenGetWithHttpInfo(token, id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Updates an existing user
     * Admin can update user data EXCEPT password. Can only initiate a pass reset.
     * @param id
     * @param user The user data to be updated
     */
    AdminApi.prototype.usersIdPut = function (id, user, extraHttpRequestParams) {
        return this.usersIdPutWithHttpInfo(id, user, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * creates a new user
     * @param user The user to save
     */
    AdminApi.prototype.usersPost = function (user, extraHttpRequestParams) {
        return this.usersPostWithHttpInfo(user, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     * Update user&#39;s balance
     * @param id
     * @param amount
     */
    AdminApi.prototype.balanceIdPutWithHttpInfo = function (id, deposit, extraHttpRequestParams) {
        var path = this.basePath + '/balance/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling balanceIdPut.');
        }
        // verify required parameter 'deposit' is not null or undefined
        if (deposit === null || deposit === undefined) {
            throw new Error('Required parameter deposit was null or undefined when calling balanceIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: deposit == null ? '' : JSON.stringify(deposit),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * get global settings
     */
    AdminApi.prototype.globalsettingsGetWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + "/globalsettings";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete menu and orders
     *
     * @param id
     */
    AdminApi.prototype.dailyMenusIdDeleteWithHttpInfo = function (id, extraHttpRequestParams) {
        var path = this.basePath + '/dailyMenus/${id}'
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dailyMenusIdDelete.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * set global settings
     * @param settings The global settings to be updated
     */
    AdminApi.prototype.globalsettingsPutWithHttpInfo = function (settings, extraHttpRequestParams) {
        var path = this.basePath + "/globalsettings";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settings' is not null or undefined
        if (settings === null || settings === undefined) {
            throw new Error('Required parameter settings was null or undefined when calling globalsettingsPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: settings == null ? '' : JSON.stringify(settings),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get users
     *
     * @param page Request pagination page
     * @param size Request pagination size / num of users
     * @param orderBy Request orderBy filter
     * @param orderDirection Request orderBy filter
     */
    AdminApi.prototype.usersGetWithHttpInfo = function (page, size, orderBy, orderDirection, lastName, extraHttpRequestParams) {
        var path = this.basePath + '/users';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (page !== undefined) {
            queryParameters.set('page', page);
        }
        if (size !== undefined) {
            queryParameters.set('size', size);
        }
        if (orderBy !== undefined) {
            queryParameters.set('orderBy', orderBy);
        }
        if (orderDirection !== undefined) {
            queryParameters.set('orderDirection', orderDirection);
        }
        if (lastName !== undefined) {
            queryParameters.set('lastName', lastName);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * Change approve status of user
     * @param id
     * @param approve Approve or disapprove
     * @param force Force disapprove user
     */
    AdminApi.prototype.usersIdApprovePutWithHttpInfo = function (id, approve, force, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id + "/approve");
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdApprovePut.');
        }
        // verify required parameter 'approve' is not null or undefined
        if (approve === null || approve === undefined) {
            throw new Error('Required parameter approve was null or undefined when calling usersIdApprovePut.');
        }
        if (approve !== undefined) {
            queryParameters.set('approve', approve);
        }
        if (force !== undefined) {
            queryParameters.set('force', force);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Deletes an existing user
     *
     * @param id
     */
    AdminApi.prototype.usersIdDeleteWithHttpInfo = function (id, force, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdDelete.');
        }
        if (force !== undefined) {
            queryParameters.set('force', force);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * initiate pass reset
     * @param id
     */
    AdminApi.prototype.usersIdForgotpwdPostWithHttpInfo = function (id, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id + "/forgotpwd");
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdForgotpwdPost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get user by id
     *
     * @param id
     */
    AdminApi.prototype.usersIdGetWithHttpInfo = function (id, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
         * deletes profile picture.
         *
         * @param id user id
         */
    AdminApi.prototype.usersIdPictureDeleteWithHttpInfo = function (id, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id + "/picture");
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdPictureDelete.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Uploads a file.
     *
     * @param id user id
     * @param file The file to upload
     */
    AdminApi.prototype.usersIdPicturePostWithHttpInfo = function (id, file, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id + "/picture");
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        var formParams = new http_1.URLSearchParams();
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdPicturePost.');
        }
        // to determine the Content-Type header
        var consumes = [
            'multipart/form-data'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/x-www-form-urlencoded');
        if (file !== undefined) {
            formParams.set('file', file);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * Get profile picture.
     * @param token auth token
     * @param id user id
     */
    AdminApi.prototype.usersIdPictureTokenGetWithHttpInfo = function (token, id, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id + "/picture/token");
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling usersIdPictureTokenGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdPictureTokenGet.');
        }
        if (token !== undefined) {
            queryParameters.set('token', token);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'image/jpeg'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Updates an existing user
     * Admin can update user data EXCEPT password. Can only initiate a pass reset.
     * @param id
     * @param user The user data to be updated
     */
    AdminApi.prototype.usersIdPutWithHttpInfo = function (id, user, extraHttpRequestParams) {
        var path = this.basePath + ("/users/" + id);
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling usersIdPut.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling usersIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: user == null ? '' : JSON.stringify(user),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * creates a new user
     * @param user The user to save
     */
    AdminApi.prototype.usersPostWithHttpInfo = function (user, extraHttpRequestParams) {
        var path = this.basePath + "/users";
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: user == null ? '' : JSON.stringify(user),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * get holidays by year
     * @param year
     */
    AdminApi.prototype.globalsettingsHolidaysYearGet = function (year, extraHttpRequestParams) {
        return this.globalsettingsHolidaysYearGetWithHttpInfo(year, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * set holidays by year
     * @param year
     * @param holidays The holidays to set
     */
    AdminApi.prototype.globalsettingsHolidaysYearPost = function (year, holidays, extraHttpRequestParams) {
        return this.globalsettingsHolidaysYearPostWithHttpInfo(year, holidays, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * get holidays by year
     * @param year
     */
    AdminApi.prototype.globalsettingsHolidaysYearGetWithHttpInfo = function (year, extraHttpRequestParams) {
        var path = this.basePath + '/globalsettings/holidays/${year}'
            .replace('${' + 'year' + '}', String(year));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling globalsettingsHolidaysYearGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * set holidays by year
     * @param year
     * @param holidays The holidays to set
     */
    AdminApi.prototype.globalsettingsHolidaysYearPostWithHttpInfo = function (year, holidays, extraHttpRequestParams) {
        var path = this.basePath + '/globalsettings/holidays/${year}'
            .replace('${' + 'year' + '}', String(year));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling globalsettingsHolidaysYearPost.');
        }
        // verify required parameter 'holidays' is not null or undefined
        if (holidays === null || holidays === undefined) {
            throw new Error('Required parameter holidays was null or undefined when calling globalsettingsHolidaysYearPost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (Bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: holidays == null ? '' : JSON.stringify(holidays),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    AdminApi = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], AdminApi);
    return AdminApi;
}());
exports.AdminApi = AdminApi;
//# sourceMappingURL=data:application/json;base64,